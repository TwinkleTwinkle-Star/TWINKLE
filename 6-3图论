
/*
KM算法：
在求二分图的匹配中，一个基本的算法就是KM算法。
KM的算法核心思想，就是寻找增广路。因为，每找到一条增广路，那么匹配数就会多1.
所以，那么就一直找增广路，直到找不到为止。
找不到的时候，得到的就是最大匹配数了和相应的匹配了。
*/

//二分图最佳匹配,kuhn munkras算法,邻接阵形式,复杂度O(m*m*n)
//返回最佳匹配值,传入二分图大小m,n和邻接阵mat,表示权值
//match1,match2返回一个最佳匹配,未匹配顶点match值为-1
//一定注意m<=n,否则循环无法终止
//最小权匹配可将权值取相反数
#include<stdio.h>
#include<string.h>
#define MAXN 310
#define inf 1000000000
#define _clr(x) memset(x,0xff,sizeof(int)*n)
int kuhn_munkras(int m,int n,int mat[][MAXN],int* match1,int* match2){
	int s[MAXN],t[MAXN],l1[MAXN],l2[MAXN],p,q,ret=0,i,j,k;
	for (i=0;i<m;i++)
		for (l1[i]=-inf,j=0;j<n;j++)
			l1[i]=mat[i][j]>l1[i]?mat[i][j]:l1[i];
		for (i=0;i<n;l2[i++]=0);
		for (_clr(match1),_clr(match2),i=0;i<m;i++){
			for (_clr(t),s[p=q=0]=i;p<=q&&match1[i]<0;p++)
				for (k=s[p],j=0;j<n&&match1[i]<0;j++)
					if (l1[k]+l2[j]==mat[k][j]&&t[j]<0){
						s[++q]=match2[j],t[j]=k;
						if (s[q]<0)
							for (p=j;p>=0;j=p)
								match2[j]=k=t[j],p=match1[k],match1[k]=j;
					}
					if (match1[i]<0){
						for (i--,p=inf,k=0;k<=q;k++)
							for (j=0;j<n;j++)
								if (t[j]<0&&l1[s[k]]+l2[j]-mat[s[k]][j]<p)
									p=l1[s[k]]+l2[j]-mat[s[k]][j];
								for (j=0;j<n;l2[j]+=t[j]<0?0:p,j++);
								for (k=0;k<=q;l1[s[k++]]-=p);
					}
		}
		for (i=0;i<m;i++)
			ret+=mat[i][match1[i]];
		return ret;
}


