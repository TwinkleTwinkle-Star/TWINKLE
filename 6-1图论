/*
匈牙利算法

匈牙利算法是一种在多项式时间内求解任务分配
问题的组合优化算法，并推动了后来的原始对偶方法。
美国数学家哈罗德·库恩于1955年提出该算法。

算法的核心寻找增广路径

简介
设G=(V,E)是一个无向图。如顶点集V可分割为两个互不相交的子集V1,V2，
选择这样的子集中边数最大的子集称为图的最大匹配问题（maximal matching problem)。
如果一个匹配中，|V1|<=|V2|且匹配数|M|=|V1| ，则称此匹配为完全匹配，也称作完备匹配。
特别的当|V1|=|V2|称为完美匹配。

概念
在介绍匈牙利算法之前还是先提一下几个概念，下面M是G的一个匹配。
若V={X1,X2,X3,Y1,Y2,Y3,Y4} ，
 E={(X1,Y2),(X1,Y4),(X2,Y1),(X2,Y3),(X3,Y2)}，
 其中边(X1,Y2),(X2,Y1)已经在匹配M上。
*/
#include<string.h>
#include<stdio.h>
#define maxn 160
int a[maxn],b[maxn],c[maxn],d[maxn];
int used[maxn];
int girl[maxn],line[maxn][maxn];
int n;

int  Find(int x)
{ int j;
    for( j=1;j<=n;j++)
    { if(line[x][j]&&!used[j])
        { used[j]=1;
          if(girl[j]==0||Find(girl[j])){girl[j]=x;return 1;}
        }
    }
    return 0;}

int main()
{ 
	int i,j;
	int ans;
    scanf("%d",&n);
    for( i=1;i<=n;i++) scanf("%d%d",&a[i],&b[i]);
    for( i=1;i<=n;i++) scanf("%d%d",&c[i],&d[i]);
    memset(line,0,sizeof(line));
    for( i=1;i<=n;i++)
    {
        for( j=1;j<=n;j++){
            if((a[i]<c[j])&&(b[i]<d[j])){
                line[i][j]=1;
            }
        }
    }
    memset(girl,0,sizeof(girl));
    ans=0;
    for(i=1;i<=n;i++){
        memset(used,0,sizeof(used));
        if(Find(i)) ans++;
    }
   printf("%d\n",ans);
    return 0;
}
