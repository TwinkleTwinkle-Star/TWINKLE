/*
又到毕业季，很多大公司来学校招聘，招聘会分散在不同时间段，
某同学想知道自己最多能完整的参加多少个招聘会(参加一个招聘会的时候不能中断或离开)
设计程序回答问题
*/
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
struct join 
{ 
	int begin;  //开始时间
    int end;    //结束时间
}; 
int compare(const void *a, const void *b); 
int main()
{
	int i, n, k; // n为一天内招聘会的数量
    struct join joins[1001], temp[1001];
	printf("招聘会的数量:");
	while(scanf("%d", &n) != EOF) 
    { 
      for(i=0;i<n;i++) 
      { 
		  printf("输入第%d个招聘会开始时间和结束时间:",i+1);
		  scanf("%d %d", &joins[i].begin, &joins[i].end); 
      }
	  qsort(joins, n, sizeof(joins[0]), compare); //排序函数
 /*
函数简介
函数声明
void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))
参数
base-- 指向要排序的数组的第一个元素的指针。
nitems-- 由 base 指向的数组中元素的个数。
size-- 数组中每个元素的大小，以字节为单位。
compar-- 用来比较两个元素的函数，即函数指针（回调函数）
回调函数：
回调函数就是一个通过函数指针调用的函数。
如果把函数的指针（地址）作为参数传递给另一个函数，

 */   
      k=0; 
      temp[k] = joins[0]; 
      for(i = 1; i < n; i ++) 
      { 
        if(joins[i].begin >= temp[k].end) 
          temp[++ k] = joins[i]; 
      } 
	  printf("最多能完整参加的招聘会数量为:");
      printf("%d\n", k + 1); 
    }
	return 0;
} 
int compare(const void *a, const void *b)
{
	const struct join *p = a; 
    const struct join *q = b;
	return p->end - q->end;
} 
